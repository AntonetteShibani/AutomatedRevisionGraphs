summary(use.mod1)
TukeyHSD(use.mod1)
TukeyHSD(use.mod1, ~., test="F")
summary(AllDataFinal$M2_TOTAL)
table(AllDataFinal$Group)
use.mod1 <- aov(M2_TOTAL ~ Group, data = AllDataFinal)
summary(use.mod1)
plot(AllDataFinal$M2_TOTAL,AllDataFinal$cosine)
cor.test(AllDataFinal$M2_TOTAL,AllDataFinal$cosine)
plot(AllDataFinal$M2_TOTAL,AllDataFinal$nwords)
cor.test(AllDataFinal$M2_TOTAL,AllDataFinal$nwords)
Dist <- read.csv("C:/Users/12696377/Documents/Pilot Data/DistRes.csv",stringsAsFactors = FALSE)
DistReqd <- subset(Dist,select=c(StudentID,cosine,nwords))
Alldata <- merge(MarksData,DistReqd,by="StudentID")
p3 <-   ggplot() + geom_boxplot(data = Alldata,
aes(x= Group,y = nwords, fill = Group)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
# facet_wrap(~Group) +
labs(x = "Group",y = "Score")
p3
DownloadInfo <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/StudentDownload.csv", head = TRUE, stringsAsFactors=FALSE)
AllDataFinal <- merge(Alldata,DownloadInfo,by="StudentID")
View(AllDataFinal)
p1 <-   ggplot() + geom_boxplot(data = AllDataFinal,
aes(x= as.factor(selfdownload),y = M2_TOTAL)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "self downloaded",y = "score")
p1
plot(AllDataFinal$selfdownload,AllDataFinal$M2_TOTAL)
table(AllDataFinal$selfdownload)
table(AllDataFinal$selfdownload,AllDataFinal$Group)
table(AllDataFinal$DraftGrade,AllDataFinal$Group)
table(AllDataFinal$RevGrade,AllDataFinal$Group)
table(AllDataFinal$DraftConfidence,AllDataFinal$Group)
table(AllDataFinal$RevConfidence,AllDataFinal$Group)
table(AllDataFinal$RevSatis,AllDataFinal$Group)
means <- aggregate(M2_TOTAL ~  Group, AllGradedMaria, mean)
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= Group ,y = M2_TOTAL, fill = Group))+
stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "Group",y = "Grade")+
geom_text(data = means, aes(label = round(M2_TOTAL,4),x= Group, y =  M2_TOTAL))
p1
AllGradedMaria <- sqldf("Select * from AllDataFinal where M2_TOTAL!='NA'")
knitr::opts_chunk$set(echo = TRUE)
library(sqldf)
library(ggplot2)
library(car) #for levene's test
MarksData <- read.csv("C:/Users/12696377/Documents/Pilot Data/Marking/MarksDataFinal.csv")
AllGradedMaria <- sqldf("Select * from AllDataFinal where M2_TOTAL!='NA'")
means <- aggregate(M2_TOTAL ~  Group, AllGradedMaria, mean)
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= Group ,y = M2_TOTAL, fill = Group))+
stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "Group",y = "Grade")+
geom_text(data = means, aes(label = round(M2_TOTAL,4),x= Group, y =  M2_TOTAL))
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= Group ,y = M2_TOTAL, fill = Group))+
stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "Group",y = "Grade")+
geom_text(data = means, aes(label = round(M2_TOTAL,4),x= Group, y =  M2_TOTAL))
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= Group ,y = M2_TOTAL, fill = Group))+
stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "Group",y = "Grade")+
geom_text(data = means, aes(label = round(M2_TOTAL,4),x= Group, y =  M2_TOTAL))
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= Group ,y = cosine)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "Group",y = "Cosine Distance")
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= as.factor(selfdownload),y = M2_TOTAL)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "self downloaded",y = "score")
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= as.factor(insdownload),y = M2_TOTAL)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "ins downloaded",y = "score")
p1
p1 <-   ggplot() + geom_boxplot(data = AllGradedMaria,
aes(x= as.factor(both),y = M2_TOTAL)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
labs(x = "both downloaded",y = "score")
p1
p2 <-   ggplot() + geom_bar(data = AllGradedMaria,
aes(x = factor(both),fill = Group),
position = "stack") +
labs(x = "Usefulness Score",y = "Group distribution")
p2
p2 <-   ggplot() + geom_bar(data = AllGradedMaria,
aes(x = factor(both),fill = Group),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
p2
plot(AllDataFinal$M2_TOTAL,AllDataFinal$cosine)
cor.test(AllDataFinal$M2_TOTAL,AllDataFinal$cosine)
View(AllDataFinal)
rm(Alldata)
View(Dist)
rm(Dist)
View(DownloadInfo)
Awausage <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
View(Awausage)
Awausage <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
View(Awausage)
Awaoutputs <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
Awausage <- sqldf("Select count(StudentID), StudentID from Awaoutputs group by StudentID")
View(Awausage)
Awausage <- sqldf("Select StudentID, count(StudentID) from Awaoutputs group by StudentID")
rm(Awaoutputs)
View(Awausage)
View(MarksData)
Drafts <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/Drafts.csv", head = TRUE, stringsAsFactors=FALSE)
View(Drafts)
Draftscount <- sqldf("Select StudentID, count(StudentID) from Drafts group by StudentID")
View(Draftscount)
rm(Drafts)
AllDataFinalNew <- sqldf("SELECT *
FROM AllDataFinal
LEFT JOIN Awausage USING(StudentID)")
View(AllDataFinalNew)
Awaoutputs <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
Awausage <- sqldf("Select StudentID, count(StudentID) as AWAusage from Awaoutputs group by StudentID")
View(Awausage)
rm(Awaoutputs)
AllDataFinalNew <- sqldf("SELECT *
FROM AllDataFinal
LEFT JOIN Awausage USING(StudentID)")
View(AllDataFinalNew)
AllDataFinal <- sqldf("SELECT *
FROM AllDataFinal
LEFT JOIN Awausage USING(StudentID)")
Drafts <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/Drafts.csv", head = TRUE, stringsAsFactors=FALSE)
Draftscount <- sqldf("Select StudentID, count(StudentID) as drafts from Drafts group by StudentID")
rm(Drafts)
AllDataFinal <- sqldf("SELECT *
FROM AllDataFinal
LEFT JOIN Draftscount USING(StudentID)")
View(AllDataFinal)
rm(AllDataFinalNew)
p3 <-   ggplot() + geom_boxplot(data = Alldata,
aes(x= Group,y = nwords, fill = Group)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
# facet_wrap(~Group) +
labs(x = "Group",y = "Score")
p3
View(AllDataFinal)
cor(AllDataFinal$PerfCateg, AllDataFinal$AWAusage)
cor(AllDataFinal$M2_TOTAL, AllDataFinal$AWAusage)
cor(AllDataFinal$M2_TOTAL, AllDataFinal$AWAusage)
use.mod2 <- aov(M2_TOTAL ~ Awausage, data = AllDataFinal)
View(AllDataFinal)
View(AllDataFinal)
test <- sqldf("SELECT *
FROM AllDataFinal where Awausage=NA and Group='awa")
test <- sqldf("SELECT *
FROM AllDataFinal where Awausage=NA and `Group`='awa")
test <- sqldf("SELECT *
FROM AllDataFinal where Awausage=NA and `Group`='awa'")
#Add Awausage=0 for AWA group students not present in awausage table
test <- sqldf("SELECT *
FROM AllDataFinal where Awausage='NA' and `Group`='awa'")
View(test)
test <- sqldf("SELECT *
FROM AllDataFinal where AWAusage='NA' and `Group`='awa'")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and isna(AWAusage)")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and is.na(AWAusage)")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=NA")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=NULL")
View(test)
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa'")
View(test)
test <- within(test, Awausage[Group == 'awa' & Awausage == NA] <- 0)
test <- within(test, Awausage[Group == 'awa' & is.na(Awausage)] <- 0)
test <- within(test, Awausage[ is.na(Awausage)] <- 0)
rm(Awausage)
rm(Awausage)
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and is.na(awa)")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and is.na(AWAusage)")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=1")
View(test)
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=NA")
#Add Awausage=0 for AWA group students not present in awausage table
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=NULL")
ge table
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage='NA'")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage=NA")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage is NULL")
View(test)
sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa' and AWAusage is NULL")
View(AllDataFinal)
test <- sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa' and AWAusage is NULL")
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage is NULL")
View(test)
sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa' and AWAusage is NULL")
View(AllDataFinal)
test <- sqldf("SELECT *
FROM AllDataFinal where `Group`='awa' and AWAusage is NULL")
View(test)
test <- sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa' and AWAusage is NULL")
test <- sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa',AWAusage is NULL")
test <- sqldf("Update AllDataFinal set AWAusage=0 where AWAusage is NULL and `Group`='awa' ")
View(AllDataFinal)
test <- sqldf("Update AllDataFinal set AWAusage=0 where `Group`='awa' and (AWAusage is NULL) ")
View(AllDataFinal)
Alldatatest <- within(AllDataFinal, Awausage[Awausage == NULL & `group` == 'awa'] <- 0)
Alldatatest <- within(AllDataFinal, AWAusage[AWAusage == NULL & `group` == 'awa'] <- 0)
Alldatatest <- within(AllDataFinal, AWAusage[AWAusage == NULL & `Group` == 'awa'] <- 0)
View(Alldatatest)
Alldatatest <- within(AllDataFinal, AWAusage[AWAusage == NA & `Group` == 'awa'] <- 0)
View(Alldatatest)
Alldatatest <- within(AllDataFinal, AWAusage[`Group` == 'awa' & is.na(AWAusage)] <- 0)
AllDataFinal <- within(AllDataFinal, AWAusage[`Group` == 'awa' & is.na(AWAusage)] <- 0)
rm(Alldatatest)
cor(AllDataFinal$M2_TOTAL, AllDataFinal$AWAusage)
use.mod2 <- aov(M2_TOTAL ~ Awausage, data = AllDataFinal)
summary(use.mod2)
use.mod2 <- aov(M2_TOTAL ~ AWAusage, data = AllDataFinal)
summary(use.mod2)
AWAdata <- sqldf("Select * from AllDataFinal where `Group`='awa'")
use.mod2 <- aov(M2_TOTAL ~ AWAusage, data = AWAdata)
summary(use.mod2)
use.mod2 <- aov(PerfCateg ~ AWAusage, data = AWAdata)
summary(use.mod2)
View(AWAdata)
use.mod2 <- aov(PerfCateg ~ AWAusage, data = AWAdata)
cor(AWAdata$PerfCateg,AWAdata$AWAusage)
boxplot(AWAusage ~ PerfCateg, data = AWAusage, ylab = "Duration of conversation")
boxplot(AWAusage ~ PerfCateg, data = AWAdata, ylab = "Duration of conversation")
boxplot(AWAusage ~ PerfCateg, data = AWAdata, ylab = "AWA usage count")
boxplot(PerfCateg ~ AWAusage, data = AWAdata, ylab = "Performance Category")
plot(PerfCateg ~ AWAusage, data = AWAdata, ylab = "Performance Category")
boxplot(AWAusage ~ PerfCateg, data = AWAdata, ylab = "AWA usage count")
?cor
cor(AWAdata$M2_TOTAL, AWAdata$AWAusage)
cor(AWAdata$M2_TOTAL, AWAdata$AWAusage, method = c("pearson", "kendall", "spearman"))
plot(AWAdata$M2_TOTAL, AWAdata$AWAusage)
plot(AWAdata$AWAusage, AWAdata$M2_TOTAL)
cor(AWAdata$M2_TOTAL, AWAdata$AWAusage)
ggplot() + geom_bar(data = AWAdata,
aes(x = PerfCateg,fill = Group),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AWAdata,
aes(x = Awausage,fill = PerfCateg),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AWAdata,
aes(x = AWAusage,fill = PerfCateg),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AllDataFinal,
aes(x = PerfCateg,fill = Group),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AllDataFinal,
aes(x = factor(AWAusage),fill = Group),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AllDataFinal,
aes(x = Group,y=Drafts),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
ggplot() + geom_bar(data = AllDataFinal,
aes(x = Group,y=Draftscount),
position = "fill") +
labs(x = "Usefulness Score",y = "Group distribution")
boxplot(Draftscount ~ PerfCateg, data = AllDataFinal, ylab = "Draftscount")
boxplot(Drafts ~ PerfCateg, data = AllDataFinal, ylab = "Draftscount")
View(AllDataFinal)
boxplot(drafts ~ PerfCateg, data = AllDataFinal, ylab = "Draftscount")
boxplot(AWAusage ~ PerfCateg, data = AWAdata, ylab = "AWA usage count")
cor(AWAdata$M2_TOTAL, AWAdata$AWAusage)
boxplot(AWAusage ~ PerfCateg, data = AWAdata, ylab = "AWA usage count")
table(AWAdata$PerfCateg, AWAdata$AWAusage)
AllDataFinal$cosinenew <- 10000*AllDataFinal$cosine
AllDataFinal$cosinenew <- round(10000*AllDataFinal$cosine,2)
AllDataFinal$cosinenew <- round(10000*AllDataFinal$cosine,4)
Awausage <- sqldf("Select StudentID, count(StudentID) as AWAusage from Awaoutputs group by StudentID")
Awaoutputs <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
Awausage <- sqldf("Select StudentID, count(StudentID) as AWAusage from Awaoutputs group by StudentID")
View(Awausage)
View(Awaoutputs)
Awausageout <- sqldf("Select * from Awaoutputs  having count(StudentID)>25")
Awausageout <- sqldf("Select * from Awaoutputs group by StudentID having count(StudentID)>25")
View(Awausageout)
View(Awausage)
rm(Awaoutputs)
AllDataFinal <- sqldf("SELECT *
FROM AllDataFinal
LEFT JOIN Awausage USING(StudentID)")
rm(Awausage)
#Update Awausage=0 for AWA group students not present in awausage table
#test <- sqldf("SELECT * FROM AllDataFinal where `Group`='awa' and AWAusage is NULL")
AllDataFinal <- within(AllDataFinal, AWAusage[`Group` == 'awa' & is.na(AWAusage)] <- 0)
View(AWAdata)
plot(AWAdata$AWAusage, AWAdata$M2_TOTAL)
plot(AWAdata$PerfCateg, AWAdata$AWAusage)
plot(AWAdata$M2_TOTAL, AWAdata$AWAusage)
rm(Awausageout)
```{r inc2}
Awaoutputs <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/awaoutputs.csv", head = TRUE, stringsAsFactors=FALSE)
Awausage <- sqldf("Select StudentID, count(StudentID) as AWAusage from Awaoutputs group by StudentID")
View(Awaoutputs)
AWAdrafts1 <- sqldf("Select StudentID, AWAOutput from Awaoutputs where StudentID='99199147")
AWAdrafts1 <- sqldf("Select StudentID, AWAOutput from Awaoutputs where StudentID='99199147'")
View(AWAdrafts1)
write.csv(AWAdrafts1,"AWAdrafts1.csv")
AWAdrafts2 <- sqldf("Select StudentID, AWAOutput from Awaoutputs where StudentID='12618726'")
write.csv(AWAdrafts2,"AWAdrafts2.csv")
library(wordcloud)
AllData <- read.csv("C:/Users/12696377/Documents/Pilot Data/Marking/AllDataFinal.csv",head = TRUE, stringsAsFactors=FALSE)
Drafts <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/Drafts.csv", head = TRUE, stringsAsFactors=FALSE)
library(dplyr)
library(R2HTML)
library(sqldf)
library(stringr)
library(units)
library(ggraph)
library(igraph)
library(tidyr)
library(tidytext)
library(SnowballC)
library(tm)
library(wordcloud)
library(RWeka)
#Selecting a good and bad essay for analysis
library(RColorBrewer)
essay1 <- sqldf("Select * from Drafts where StudentID=98060623")
essay2 <- sqldf("Select * from Drafts where StudentID=10329819") #old 75527 has many changes
#Adding a ID based on row number
essay1 <- mutate(essay1, id = rownames(essay1))
essay2 <- mutate(essay2, id = rownames(essay2))
essay1drafts <- sqldf("Select * from essay1 where id in (7,14,21,28) ")
essay2drafts <- sqldf("Select * from essay2 where id in (6,12,18,26) ") #out of 26 drafts
#Essay = essay1drafts$Essay
#StudentID = essay1drafts$StudentID
Essay = essay2drafts$Essay
StudentID = essay2drafts$StudentID
ext = ".html"
setwd("C:/Users/12696377/Documents/Pilot Data/DraftsAnalysis/Outputhtml")
for (i in 1:length(Essay))
{
#12474045_Draft_1
filename = paste(StudentID[i][1], "Draft", i, sep="_")
#1_12474045_Draft.html #12474045_Draft_1.html
file = paste(filename,ext,sep="")
essay = Essay[i][1]
HTML(essay, file = file)
}
## Get the final improved essay of the two students
ImprovedEssay <-read.csv("C:/Users/12696377/Documents/Pilot Data/Database tables/editortext.csv", head = TRUE, stringsAsFactors=FALSE)
ImprovedEssay <- sqldf("Select StudentID,ImprovedEssay from ImprovedEssay where StudentID=98060623 or StudentID=10329819")
#Removing row2 since ID 98060623 has 2 submissions
ImprovedEssay <- ImprovedEssay[-2,]
#Clean html tags and punctuations from essay text
cleanhtml <- function(txt)
{
txt <- tolower(txt)
txt <- gsub("<[^>]+>"," ",txt)
txt <- gsub("\n"," ",txt)
txt <- gsub("&#39;"," ",txt)
txt <- gsub("&lt;"," ",txt)
txt <- gsub("&gt;"," ",txt)
txt <- gsub("&nbsp;"," ",txt)
txt <- gsub("[[:punct:]]"," ",txt)
txt <- gsub("[[:digit:]]"," ",txt)
txt <- gsub("quot"," ",txt)
txt <- trimws(txt)
txt
}
txt1 <- paste(readLines("C:/Users/12696377/Documents/Pilot Data/DraftsAnalysis/txt1.txt"), collapse=" ")
txt2 <- paste(readLines("C:/Users/12696377/Documents/Pilot Data/DraftsAnalysis/txt2.txt"), collapse=" ")
orig <- paste(readLines("C:/Users/12696377/Documents/Pilot Data/DraftsAnalysis/orig.txt"), collapse=" ")
origtext <- cleanhtml(orig)
#library(readr) #this also works but includes \r\n
#txt2 <- read_file("C:/Users/12696377/Documents/Pilot Data/DraftsAnalysis/txt2.txt")
#essays <- cleanhtml(ImprovedEssay$ImprovedEssay[1])
#essays <- cleanhtml(ImprovedEssay$ImprovedEssay[2])
### Trigrams graph ###
essays <- cleanhtml(txt1)
# adding a document variable to retain which documents the text comes from
#text_df <- data_frame(document=1:122, text = essays)
text_df <- data_frame(document=1:1, text = essays)
more_stopwords <- c("as","n","the","of","in","is","to","xx",
"and","will","be","i","s","a","an","it",
"has","have","were","are","for","with","from","or","by")
doc_trigrams <- text_df %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3) #n=3 orig
doc_trigrams
#counting trigrams
doc_trigrams %>%
count(trigram, sort = TRUE)
# seperating words and removing stop words
trigrams_separated <- doc_trigrams %>%
separate(trigram, c("word1", "word2","word3"), sep = " ")
trigrams_filtered <- trigrams_separated %>%
filter( !word1 %in% more_stopwords) %>%
filter( !word2 %in% more_stopwords) %>%
filter( !word3 %in% more_stopwords)
#removed !word2 %in% stop_words$word,
# new trigram counts
trigram_counts <- trigrams_filtered %>%
count(word1, word2, word3, sort = TRUE)
trigram_counts
# uniting bigrams
trigrams_united <- trigrams_filtered%>%
unite(trigram, word1, word2,word3, sep = " ")
trigrams_united
############################################################
doc_trigrams_count <- trigrams_united %>%
count(trigram) %>% top_n(20) %>% arrange(desc(n))
doc_trigrams_count
# Visualising top trigrams
# this step is to order the bars in ggplot
doc_trigrams_count$trigram <- factor(doc_trigrams_count$trigram, levels = doc_trigrams_count$trigram[order(doc_trigrams_count$n)])
doc_trigrams_count$trigram
doc_trigrams_count %>%
ggplot(aes(trigram ,n )) + geom_bar(stat = "identity", fill ="cyan4") + coord_flip()+
labs(title = "Top trigrams in document",x = NULL, y = NULL) +
theme_minimal()
# Finding Clusters: Network representation of Trigrams
# This is done using igraph and ggraph packages
# first step: converting trigrams to a graph object
#using igraph package -  graph_from_data_frame()
#n>=3
#n<90: words with <90 frequency
ngram_graph <- trigram_counts %>% #filter(n<=1) %>%
graph_from_data_frame()
ngram_graph
# second step:plotting network graph using ggraph package
# this is based on examples from http://tidytextmining.com/nasa.html
set.seed(7000)
#geom_edge link extra attr:  color=factor(word3)
#final new
ggraph(ngram_graph,layout = "fr") +
geom_edge_link(aes(edge_alpha = 1, edge_width = n)) +
geom_node_point(color="blue", size = 2) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
theme_void()
########### Analysing a set of good and bad essays #####
AlldataforAnalysis <- read.csv("C:/Users/12696377/Documents/Pilot Data/Marking/AllDataFinal.csv", head = TRUE, stringsAsFactors=FALSE)
AlldataforAnalysis$cosinenew <- round(10000*AlldataforAnalysis$cosine,4)
AlldataforAnalysis$CleanEssay <- cleanhtml(AlldataforAnalysis$ImprovedEssay)
library(stringr)
nwords <- function(string, pseudo=F){
ifelse( pseudo,
pattern <- "\\S+",
pattern <- "[[:alpha:]]+"
)
str_count(string, pattern)
}
AlldataforAnalysis$nwords <- nwords(AlldataforAnalysis$CleanEssay)
AlldataforAnalysis$nwordsChanged <- AlldataforAnalysis$nwords -550
#Dataset <-  sqldf("Select * from AlldataforAnalysis where PerfCateg='Improved' or PerfCateg='Degraded'  ")
#Degraded Improved
#16       71
Dataset <-  sqldf("Select * from AlldataforAnalysis where (PerfCateg='Improved' and M2_Total>=12) or (PerfCateg='Degraded')  ")
table(Dataset$PerfCateg)
Dataset1 <-  sqldf("Select * from AlldataforAnalysis where PerfCateg='Improved' and M2_Total>=12")
Dataset2 <-  sqldf("Select * from AlldataforAnalysis where PerfCateg='Degraded'  ")
summary(Dataset1$nwordsChanged)
summary(Dataset2$nwordsChanged)
summary(Dataset$nwordsChanged)
#nwords changed
means1 <- aggregate(nwordsChanged ~  PerfCateg, Dataset, mean)
means1$nwordsChanged <- round(means1$nwordsChanged,2)
ggplot() + geom_boxplot(data = Dataset,
aes(x= PerfCateg,y = nwordsChanged, fill = PerfCateg)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
# facet_wrap(~Group) +
labs(x = "Performance category",y = "Wordcount change")+
geom_text(data = means1, aes(label = nwordsChanged,x= PerfCateg, y =  nwordsChanged)) #TaskUseful + 0.08
summary(Dataset$cosine)
summary(Dataset1$cosine)
summary(Dataset2$cosine)
means1 <- aggregate(cosine ~  PerfCateg, Dataset, mean)
means1$cosine <- round(means1$cosine,8)
ggplot() + geom_boxplot(data = Dataset,
aes(x= PerfCateg,y = cosine, fill = PerfCateg)
) + stat_summary(fun.y=mean,geom="point",shape=23,size=4)+
# facet_wrap(~Group) +
labs(x = "Performance category",y = "Distance measure")+
geom_text(data = means1, aes(label = cosine,x= PerfCateg, y =  cosine)) #TaskUseful + 0.08
#Cosine new by performance category
summary(Dataset$cosinenew)
summary(Dataset1$cosinenew)
summary(Dataset2$cosinenew)
---
AllInfo <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database Tables/df2.csv", head = TRUE, stringsAsFactors=FALSE)
AllInfo <- read.csv("C:/Users/12696377/Documents/Pilot Data/Database Tables/df2.csv", head = TRUE, stringsAsFactors=FALSE)
View(AllInfo)
